<project name="elephant-bird-examples" default="package" basedir=".">
    
  <!-- Global properties for this build -->
  <property name="jar.name" value="elephant-bird-examples" />
  <property name="version" value="1.0" />

  <!-- Directories -->
  <property name="build.dir" location="build" />
  <property name="javadoc.dir" location="javadoc" />
  <property name="dist.dir"  location="dist" />
  
  <property name="src.dir" location="src" />
  <property name="src.java.dir" location="${src.dir}/java" />
  <property name="src.proto.dir" location="${src.dir}/proto" />
  
  <property name="src.gen.java.dir" location="${src.dir}/gen-java" /> 
  <property name="src.gen.piglet.dir" location="${src.dir}/gen-piglet" />
  <property name="classes.dir" location="${build.dir}/classes" />
  
  <target name="init">
    <tstamp/>
    
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build.dir}" />
    <mkdir dir="${classes.dir}" />
  </target>

  <target name="compile" depends="init, compile-protobuf" description="compile the source">
    <!-- Compile the java code from ${src.java} into ${build} -->
    <javac srcdir="${src.java.dir}" destdir="${classes.dir}" debuglevel="lines,vars,source">
      <classpath>
        <fileset dir="../lib">
          <include name="**/*.jar"/>
        </fileset>
        <fileset dir="../dist">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
    </javac>
  </target>
    
  <macrodef name="generate-protobuf">
      <sequential>
        <mkdir dir="${src.gen.java.dir}" />
        <property name="protoc.bin" value="protoc" />
        <apply executable="${protoc.bin}" failonerror="true" skipemptyfilesets="true" verbose="true">
          <env key="PATH" path="${env.PATH}:." />
          <arg value="--proto_path=${src.proto.dir}" />
          <arg value="--java_out=${src.gen.java.dir}" />
          <!-- The following line will invoke protoc_gen_twadoop, our protoc plugin -->
          <arg value="--twadoop_out=${src.gen.java.dir}" />
          <arg value="--proto_path=${src.proto.dir}" />
          <fileset dir="${src.proto.dir}" includes="**/*.proto" />
        </apply>
      </sequential>
    </macrodef>

  <macrodef name="compile-generated-protobuf">
    <sequential>
      <javac srcdir="${src.gen.java.dir}" destdir="${classes.dir}" deprecation="on">
        <classpath>
          <fileset dir="../lib">
            <include name="**/*.jar"/>
          </fileset>
          <fileset dir="../dist">
            <include name="**/*.jar"/>
          </fileset>
        </classpath>
        <include name="**/*.java" />
      </javac>
    </sequential>
  </macrodef>
  
  
  <target name="compile-piglet" depends="jar">
    <mkdir dir="${src.gen.piglet.dir}" />
    <property name="protoc.bin" value="protoc" />
    <apply executable="${protoc.bin}" failonerror="true" skipemptyfilesets="true" verbose="true">
      <env key="PATH" path="${env.PATH}:." />
      <arg value="--proto_path=${src.proto.dir}" />
      <!-- The following line will invoke protoc_gen_piglet, our protoc plugin -->
      <arg value="--piglet_out=${src.gen.piglet.dir}" />
      <fileset dir="${src.proto.dir}" includes="**/*.proto" />
      <globmapper from="*.proto" to="*.java" />
    </apply>
  </target>

  <target name="compile-protobuf" depends="init">
    <generate-protobuf />
    <compile-generated-protobuf />
  </target>
  
  <target name="jar" depends="compile" description="generate the distribution">
    <!-- Create the distribution directory -->
    <mkdir dir="${dist.dir}"/>
	<!-- Delete the old jar file -->
	<delete file="${dist.dir}/${jar.name}-${version}.jar"/>
    <jar jarfile="${dist.dir}/${jar.name}-${version}.jar">
      <fileset dir="${classes.dir}"/>
    </jar>
  </target>
  
  <target name="javadoc" depends="init, compile-protobuf" description="generate documentation" >
    <delete dir="${javadoc.dir}" />
    <javadoc destdir="${javadoc.dir}">
      <fileset dir="${src.java.dir}" />
      <fileset dir="${src.gen.java.dir}" />
      <classpath>
        <fileset dir="lib">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
    </javadoc>
  </target>
  
  <target name="package" depends="jar,compile-piglet" />

  <target name="clean" description="clean up">
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build.dir}"/>
    <delete dir="${classes.dir}" />
    <delete dir="${dist.dir}"/>
  </target>
</project>

